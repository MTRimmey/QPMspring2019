install.packages("Zelig")
library("Zelig")
data("voteincome")
?voteincome
table(voteincome$year)
table(voteincome$income)
table(voteincome$age)/1500
sd(voteincome$age)
mean(voteincome$age)
View(voteincome)
table(voteincome$year)
table(voteincome$income)
table(voteincome$age)/1500
sd(voteincome$age)
mean(voteincome$age)
s = 17.47113
m = 49.26133
n = 1500
xbar = 100
sd(voteincome$age)
mean(voteincome$age)
mean(voteincome$year)
mean(voteincome$age)
(voteincome$age)
(voteincome$age)
mean(voteincome$age)
mean(voteincome$age)
sd(voteincome$age)
se(voteincome$age)
sd(voteincome$age)
(voteincome$age)
sum(voteincome$age)
sd(voteincome$age)
sum(voteincome$vote)
Population <- (698)
mean(Population)
Population <- (1, 698)
Population <- (698)
mean(Population)
table(voteincome$age)/1283
x <- seq(-4, 4, length=1000)
y <- dnorm(x, mean=0, sd=1)
plot(x, y, type="l", lwd=1)
DF1 <- dt(x, 20)
lines(x, DF1, type="l", lwd=1, col="Red")
DF2 <- dt(x, 3)
lines(x, DF2, type="l", lwd=1, col="Green")
DF3 <- dt(x, 1)
lines(x, DF3, type="l", lwd=1, col="Blue")
plot(x="Various Plots", y, type="l", lwd=1)
plot(x="Various Plots", type="l", lwd=1)
plot(x,y type="l", lwd=1)
plot(x,y, type="l", lwd=1)
DF1 <- dt(x, 20)
lines(x, DF1, type="l", lwd=1, col="Red")
DF2 <- dt(x, 3)
lines(x, DF2, type="l", lwd=1, col="Green")
DF3 <- dt(x, 1)
lines(x, DF3, type="l", lwd=1, col="Blue")
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE)
n <- length(na.omit(voteincome$age))
sample_mean <- mean(voteincome$age, na.rm = TRUE)
sample_sd <- sd(voteincome$age, na.rm = TRUE)
lower_95 <- sample_mean - (z95 * (sample_sd/sqrt(n)))
upper_95 <- sample_mean + (z95 * (sample_sd/sqrt(n)))
confint95 <- c(lower_95, upper_95)
confint95 <- c(lower_95, upper_95)
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE)
n <- length(na.omit(voteincome$age))
sample_mean <- mean(voteincome$age, na.rm = TRUE)
table(voteincome$age)/1283
x <- c(3.5, 1.3, 6.6, 1.3, 1, .6)
standardized.x <- (x - mean(x))/sd(x)
x <- runif(100, 0, 1)
y <- 2 + X*1.5 + rnorm(100, 0, 1)
x <- runif(100, 0, 1)
y <- 2 + X*1.5 + rnorm(100, 0, 1)
temp.model <- (lm:Y~X)
x <- runif(100, 0, 1)
y <- 2 + X*1.5 + rnorm(100, 0, 1)
x <- runif(100, 0, 1)
y <- 2 + x*1.5 + rnorm(100, 0, 1)
temp.model <- (lm:Y~X)
plot(x, y, pch=19, main="Residuals for Simulated Data")
abline(temp.model)
preds <- predict(temp.model)
segments(x,y,x,preds)
plot(density(y-preds),
main="Density of Residuals", ylab="Y", xlab="X", cex.axis=1.5, lwd=3)
preds <- predict(temp.model)
Xi <- 3.8, 3.0, 3.5, 2.8, 2.4, 2.7
mean(regressMat$Y)
## Data on 1932 German Election (at precinct level)
## Paper: G. King, O. Rosen, M. Tanner, A.F. Wagner (2008)
## âOrdinary economic voting behavior in the extraordinary
## election of Adolf Hitler.â
load("nazis.Rdata")
## Data on 1932 German Election (at precinct level)
## Paper: G. King, O. Rosen, M. Tanner, A.F. Wagner (2008)
## âOrdinary economic voting behavior in the extraordinary
## election of Adolf Hitler.â
load("nazis.Rdata")
## Data on 1932 German Election (at precinct level)
## Paper: G. King, O. Rosen, M. Tanner, A.F. Wagner (2008)
## âOrdinary economic voting behavior in the extraordinary
## election of Adolf Hitler.â
load("nazis.Rdata")
setwd("~/Downloads/")
setwd("~/Downloads/")
## Data on 1932 German Election (at precinct level)
## Paper: G. King, O. Rosen, M. Tanner, A.F. Wagner (2008)
## âOrdinary economic voting behavior in the extraordinary
## election of Adolf Hitler.â
load("nazis.Rdata")
## Data on 1932 German Election (at precinct level)
## Paper: G. King, O. Rosen, M. Tanner, A.F. Wagner (2008)
## âOrdinary economic voting behavior in the extraordinary
## election of Adolf Hitler.â
load("nazis.Rdata")
setwd("~/Downloads/")
load("nazis.Rdata")
setwd("~/Downloads/GitHub/QPMSpring2019/")
setwd("cd ~/Downloads/GitHub/QPMSpring2019/")
## Data on 1932 German Election (at precinct level)
## Paper: G. King, O. Rosen, M. Tanner, A.F. Wagner (2008)
## âOrdinary economic voting behavior in the extraordinary
## election of Adolf Hitler.â
load("nazis.Rdata")
setwd("cd ~/Downloads/GitHub/QPMSpring2019/")
setwd("cd ~/Downloads/GitHub/QPMspring2019/")
setwd("~/Downloads/GitHub/QPMspring2019/")
## lm() function is for regression aka "linear model"
?lm
## lm() function is for regression aka "linear model"
?lm
setwd("~/Downloads/GitHub/QPMspring2019/nazisRdata")
## Data on 1932 German Election (at precinct level)
## Paper: G. King, O. Rosen, M. Tanner, A.F. Wagner (2008)
## âOrdinary economic voting behavior in the extraordinary
## election of Adolf Hitler.â
getwd()
source('~/GitHub/QPMspring2019/labs/lab12/lab12.R')
setwd()
getwd()
# Let's use the dataset from last week
library(faraway)
data(sat)
# Let's use the dataset from last week
library(faraway)
data(sat)
?sat
setwd("~/Documents/QPMspring2019?lab13")
setwd("~/Documents/QPMspring2019/lab13")
data(sat)
load(data)
load(data=sat)
load(sat)
View(sat)
cor(sat)
# We found that expend has a positive effect on takers with
# 95% level of significance.
sat1 <- lm(takers ~ expend, data=sat)
summary(sat1)
# We found that expend has a positive effect on takers with
# 95% level of significance.
sat1 <- lm(takers ~ expend, data=sat)
summary(sat1)
sat1 <- lm(expend ~ takers, data=sat)
# We found that expend has a positive effect on takers with
# 95% level of significance.
sat1 <- lm(takers ~ expend, data=sat)
summary(sat1)
sat2 <- lm(expend ~ takers, data=sat)
summary(sat2)
# What if we control for other factors?
sat2 <- lm(takers ~ expend + ratio + salary, data=sat)
summary(sat2)
# What if we include all the variables in the data?
sat3 <- lm(takers ~ ., data=sat)
summary(sat3)
# Load a fake dataset
load("fake.RData")
getwd(
)
load("labs/lab12/nazis.Rdata")
# Load a fake dataset
load("fake.RData")
getwd()
# Load a fake dataset
load("fake.RData/Users/bryzg/Documents")
# Load a fake dataset
load("/Users/bryzg/Documents/Fake.rdata")
# Load a fake dataset
load("/Users/bryzg/Documents/Fake.Rdata")
# Load a fake dataset
load("/Users/bryzg/Documents/Fake.RData")
# Load a fake dataset
load("~/Users/bryzg/Documents/Fake.RData")
# Load a fake dataset
load("Fake.RData")
getwd()
# Load a fake dataset
load("C:/Users/bryzg/Documents/Fake.RData")
# Load a fake dataset
setwd("C:/Users/bryzg/Documents/Fake.RData")
# Load a fake dataset
setwd("C:/Users/bryzg/Documents")
getwd()
# Load a fake dataset
setwd("C:/Users/bryzg/Documents")
# Load a fake dataset
setwd("~/Documents/GitHub/QPMspring2019/")
# Load a fake dataset
setwd("C:/Documents/GitHub/QPMspring2019/")
setwd("GitHub/QPMspring2019")
load("labs/lab12/nazis.Rdata")
# Load a fake dataset
setwd("GitHub/QPMspring2019")
load("labs/lab13/Fake.RData")
View(fake.dat)
table(fake.dat$partyID, fake.dat$treatment)
# Let's visualize the data
plot(fake.dat$treatment,
fake.dat$y,
type="n",
ylab="y (Outcome)",
xlab="Treatment",
xaxt="n",
xlim=c(-0.3,1.3))
axis(1, at=c(0,1), label=c("0=Control", "1=Treatment"))
# Republicans not treated
points(fake.dat$treatment[fake.dat$partyID=="R" & fake.dat$treatment==0],
fake.dat$y[fake.dat$partyID=="R" & fake.dat$treatment==0],
col="red")
# Republicans treated
points(fake.dat$treatment[fake.dat$partyID=="R" & fake.dat$treatment==1],
fake.dat$y[fake.dat$partyID=="R" & fake.dat$treatment==1],
col="red",
pch=3)
# Democrats not treated
points(fake.dat$treatment[fake.dat$partyID=="D" & fake.dat$treatment==0],
fake.dat$y[fake.dat$partyID=="D" & fake.dat$treatment==0],
col="blue",
pch=2)
# Democrats treated
points(fake.dat$treatment[fake.dat$partyID=="D" & fake.dat$treatment==1],
fake.dat$y[fake.dat$partyID=="D" & fake.dat$treatment==1],
col="blue",
pch=5)
# interaction.plot is a good way to show differential effects.
interaction.plot(fake.dat$treatment,
fake.dat$partyID,
fake.dat$y,
type="b",
pch=c(21,19),
ylim=c(0,15),
ylab="y",
xlab="Treatment")
no.int <- lm(y ~ treatment, data=fake.dat)
summary(no.int)
# Let's visualize the data
plot(fake.dat$treatment,
fake.dat$y,
type="n",
ylab="y (Outcome)",
xlab="Treatment",
xaxt="n",
xlim=c(-0.3,1.3))
axis(1, at=c(0,1), label=c("0=Control", "1=Treatment"))
# Republicans not treated
points(fake.dat$treatment[fake.dat$partyID=="R" & fake.dat$treatment==0],
fake.dat$y[fake.dat$partyID=="R" & fake.dat$treatment==0],
col="red")
# Republicans treated
points(fake.dat$treatment[fake.dat$partyID=="R" & fake.dat$treatment==1],
fake.dat$y[fake.dat$partyID=="R" & fake.dat$treatment==1],
col="red",
pch=3)
# Democrats not treated
points(fake.dat$treatment[fake.dat$partyID=="D" & fake.dat$treatment==0],
fake.dat$y[fake.dat$partyID=="D" & fake.dat$treatment==0],
col="blue",
pch=2)
# Democrats treated
points(fake.dat$treatment[fake.dat$partyID=="D" & fake.dat$treatment==1],
fake.dat$y[fake.dat$partyID=="D" & fake.dat$treatment==1],
col="blue",
pch=5)
# Load a fake dataset
setwd("GitHub/QPMspring2019")
load("labs/lab13/Fake.RData")
table(fake.dat$partyID, fake.dat$treatment)
# Let's visualize the data
plot(fake.dat$treatment,
fake.dat$y,
type="n",
ylab="y (Outcome)",
xlab="Treatment",
xaxt="n",
xlim=c(-0.3,1.3))
axis(1, at=c(0,1), label=c("0=Control", "1=Treatment"))
# Republicans not treated
points(fake.dat$treatment[fake.dat$partyID=="R" & fake.dat$treatment==0],
fake.dat$y[fake.dat$partyID=="R" & fake.dat$treatment==0],
col="red")
# Republicans treated
points(fake.dat$treatment[fake.dat$partyID=="R" & fake.dat$treatment==1],
fake.dat$y[fake.dat$partyID=="R" & fake.dat$treatment==1],
col="red",
pch=3)
# Democrats not treated
points(fake.dat$treatment[fake.dat$partyID=="D" & fake.dat$treatment==0],
fake.dat$y[fake.dat$partyID=="D" & fake.dat$treatment==0],
col="blue",
pch=2)
# Democrats treated
points(fake.dat$treatment[fake.dat$partyID=="D" & fake.dat$treatment==1],
fake.dat$y[fake.dat$partyID=="D" & fake.dat$treatment==1],
col="blue",
pch=5)
# interaction.plot is a good way to show differential effects.
interaction.plot(fake.dat$treatment,
fake.dat$partyID,
fake.dat$y,
type="b",
pch=c(21,19),
ylim=c(0,15),
ylab="y",
xlab="Treatment")
no.int <- lm(y ~ treatment, data=fake.dat)
summary(no.int)
# Let's try interaction
int1 <- lm(y ~ treatment + partyID + treatment:partyID, data=fake.dat)
summary(int1)
no.int <- lm(y ~ treatment, data=fake.dat)
summary(no.int)
# Treatment is not statistically different from 0
no.int <- lm(y ~ treatment + partyID, data=fake.dat)
summary(no.int)
# Let's try interaction
int1 <- lm(y ~ treatment + partyID + treatment:partyID, data=fake.dat)
summary(int1)
library("faraway")
data("star")
help(star)
colnames(star)
# For an illustrative purpose, we drop two observations
star <- star[-c(11,20),]
get(
)
getwd()
View(star)
# For an illustrative purpose, we drop two observations
star <- star[-c(11,20),]
# Change index and row numbers
star$index <- row.names(star) <- 1:nrow(star)
# The data look like this
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n")
text(star$temp, star$light, labels=star$index)
# Bivariate model
model1 <- lm(light ~ temp, data=star)
summary(model1)
# Estimated line
abline(model1, col="firebrick1", lwd=2)
# Bivariate model
model1 <- lm(light ~ temp, data=star)
summary(model1)
# Estimated line
abline(model1, col="firebrick1", lwd=2)
?pf
# Estimated line
abline(model1, col="firebrick1", lwd=2)
# Estimated line
abline(model1, col="firebrick2", lwd=2)
# Estimated line
abline(model1, col="firebrick1", lwd=2)
# Estimated line
abline(model1, col="firebrick", lwd=2)
# Estimated line
abline(model1, col="firebrick1", lwd=2)
# Check the residuals. Do they look more or less random?
plot(residuals(model1) ~ fitted(model1), data=star)
abline(h=0)
# Use absolute residuals
plot(abs(residuals(model1)) ~ fitted(model1), data=star)
abline(h=0)
install.packages("car")
library("car") # a package with lots of diagnostic tools
# Normality of Residuals
qqPlot(model1)
library("car") # a package with lots of diagnostic tools
# Normality of Residuals
qqPlot(model1)
# Outliers
outlierTest(model1)
# Cook's distance and influential observations
cooks.dist <- cooks.distance(model1)
plot(cooks.dist)
text(c(28,32), cooks.dist[c(28,32)], labels=c(28,32))
# Influential observations
influencePlot(model1,
sub="Circle size is proportial to Cook's Distance")
# What if we drop 28 and 32?
model2 <- lm(light ~ temp, data=star[-c(28,32),])
summary(model2)
# Let's compare Models 1 and 2
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n") # type="n" does not plot anything
text(star$temp, star$light, labels=star$index)
# Model 1
abline(model1, col="firebrick1", lwd=2)
# Model 2 (without 28 and 32)
abline(model2, col="maroon1", lwd=2)
# What if we include a dummy variable for 28 and 32?
star$outliers <- 0
star$outliers[c(28,32)] <- 1
model3 <- lm(light ~ temp + outliers, data=star)
summary(model3)
# Get the coefficients
coef(model3)
# Check the residuals from Model 3. Do they look more or less random?
plot(residuals(model3) ~ fitted(model3), data=star)
abline(h=0)
# Use absolute residuals
plot(abs(residuals(model3)) ~ fitted(model3), data=star)
abline(h=0)
# Quick diagnostics
plot(model3)
getwd()
chisq.test()
UpperClass <- 14, 6, 7
UpperClassNotStopped <- 14
UCNotStopped <- 14
UCNotStopped <- 14
UCBribeRequested <- 6
UCStoppedWarned <- 7
LCNotStopped <- 7
LCBribeRequested <- 7
LCStoppedWarned <- 1
z <- (xbar-a)/(s/sqrt(n))
a <- 5
sd <- 4.147
n <- 42
xbar <- 7
z <- (xbar-a)/(s/sqrt(n))
z <- (xbar-a)/(sd/sqrt(n))
z(summary)
sum(z)
a <- .1
z <- (xbar-a)/(sd/sqrt(n))
sum(z)
help(rstandard)
library(faraway)
library("faraway")
data("newhamp")
library("faraway")
data("newhamp")
colnames("newhamp")
library("faraway")
data("newhamp")
colnames("newhamp")
sum("faraway")
load("newhamp")
library("faraway")
data("star")
help(star)
colnames(star)
library("faraway")
data("newhamp")
colnames("newhamp")
load("newhamp")
setwd("GitHub/QPMspring2019")
library("faraway")
data(newhamp)
colnames("newhamp")
load("newhamp")
library("faraway")
data("newhamp")
colnames(newhamp)
load("newhamp")
install.packages(car)
library(car)
data(Prestige)
help(Prestige)
incumbents_subset.csv
load(incumbents_subset.csv)
read(incumbents_subset.csv)
read.csv(incumbents_subset.csv)
load.csv(incumbents_subset.csv)
sum(Prestige)
professional = 1
?ifelse
pchisq(12, 5 lower.tail = F)
?pchisq
pchisq(12, 5, lower.tail = FALSE)
pchisq(12, 5, lower.tail = FALSE)
install.packages(car)
library(car)
data(Prestige)
help(Prestige)
View(Prestige)
?ifelse
x <- c(6:-4)
sqrt(x)
sqrt(ifelse(x >= 0, x, NA))
Prestige$income
Prestige$professional
Prestige$type
read.csv(incumbents_subset.csv)
