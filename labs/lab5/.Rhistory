set.seed(123)
x <- rnorm (10000, mean=0, sd=1)
x <- rnorm(10000, mean=0, sd=1)
pnorm(mean(x). mean = 0, sd = 1)
pnorm(mean(x), mean = 0, sd = 1)
?quantile
dnorm(mean(x), mean = 0, sd =1)
x <- runif(100000, min = -1, max=1)
?runif
set.seed(123)
n.samples <- 20
n.samples <- 1000
sample.size <- 20
for(i in 1:n.samples)
n.samples <- 2000
set.seed(123)
n.samples <- 2000
sample.size <- 20
set.seed(123)
n.samples <- 2000
sample.size <- 20
## Review the help files
?TDist
## Visualize the two different distributions by taking 1 million random draws.
## Note: this is different than what you need to do in the homework!
random_normal <- rnorm(1000000)
random_t <- rt(1000000, df = 5)
plot(density(random_normal), col = "blue")
lines(density(random_t), col = "red")
legend("topright", legend = c("Normal", "T"), col = c("blue", "red"), lty = 1)
abline(v = mean(random_normal))
plot(density(random_normal), col = "orange")
plot(density(random_normal), col = "blue")
abline(v = mean(random_normal))
lines(density(random_t), col = "red")
legend("topright", legend = c("Normal", "T"), col = c("blue", "red"), lty = 1)
#### "Distribution" function (cumulative probability)
## Same output because distributions have the same center
pnorm(0, mean = 0, sd = 1)
pt(0, df = 10)
## but t-distribution has more volume in the tails
pnorm(-2, mean = 0, sd = 1)
pt(-2, df = 10)
#### "Quantile" functions, or inverse cumulative probability distribution
## Where is cumulative probability = .025?
## Farther out in the tails of t-distribution
qnorm(.025, mean = 0, sd = 1)
qt(.025, df = 10)
## "Density" functions
## Very similar density, but t-distribution is smaller in the middle...
dnorm(0, mean = 0, sd = 1)
dt(0, df = 10)
getwd()
## Load the data: a subset of 2004 American National Election Study
setwd("~/Downloads/")
load("anes.Rdata")
## Load the data: a subset of 2004 American National Election Study
setwd("/C:/Users/bryzg/Documents/GitHub/QPMspring2019/labs/lab5")
## Load the data: a subset of 2004 American National Election Study
setwd("C:/Users/bryzg/Documents/GitHub/QPMspring2019/labs/lab5")
load("anes.Rdata")
View(anes)
## Let's say our confidence coefficient = .95.
## Calculate the appropriate confidence interval for the
## mean level of support for how George W. Bush was
## handling the war in Iraq (bushIraq).
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE)## (1-confidence coefficient)/2
n <- length(na.omit(anes$bushiraq))
sample_mean <- mean(anes$bushiraq, na.rm = TRUE)
## Let's say our confidence coefficient = .95.
## Calculate the appropriate confidence interval for the
## mean level of support for how George W. Bush was
## handling the war in Iraq (bushIraq).
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE)## (1-confidence coefficient)/2
n <- length(na.omit(anes$bushiraq))
sample_mean <- mean(anes$bushiraq, na.rm = TRUE)
sample_sd <- sd(anes$bushiraq, na.rm = TRUE)
dnorm(0, mean = 0, sd = 1)
sample_sd <- sd(anes$bushiraq, na.rm = TRUE)
lower_95 <- sample_mean - (z95 * (sample_sd/sqrt(n)))
table(anes$bushiraq)
lower_95 <- sample_mean - (z95 * (sample_sd/sqrt(n)))
upper_95 <- sample_mean + (z95 * (sample_sd/sqrt(n)))
confint95 <- c(lower_95, upper_95) ## What does this mean?
## Now let's use a confidence coefficient = .99
z99 <- qnorm((1 - .99)/2, lower.tail = FALSE)
lower_99 <- sample_mean - (z99 * (sample_sd/sqrt(n)))
upper_99 <- sample_mean + (z99 * (sample_sd/sqrt(n)))
confint99 <- c(lower_99, upper_99)
## 2. Load data using the following code. Read the help file.
install.packages("faraway")
library(faraway)
data(africa)
?africa
View(africa)
nomiltcoup= africa[$miltcoup==0,]
nomiltcoup= africa[africa$miltcoup==0,]
yesmiltcoup= africa[africa$miltcoup>0,]
View(nomiltcoup)
View(yesmiltcoup)
names(africa)
noCoups <- africa[africa$miltcoup==0,]
yesCoups <- africa[africa$miltcoup<0,]
yesCoups <- africa[africa$miltcoup<0,]
mean(noCoups, na.rm = 1)
zScore <-
mean(noCoups, na.rm = T)
zScore <- qnorm((1-.95/2), lower.tail = F)
mean(noCoups, na.rm = T)
lenght(npoCoups)
lenght(noCoups)
lenght(nocoups)
sd(noCoups$pctvote)
length(noCoups)
sd(noCoups$pctvote)
mean(noCoups, na.rm = T) +zScore * (sd(noCoups)/sqrt(length(noCoups)))
zScore <- qnorm((1-.95/2), lower.tail = F)
mean(noCoups, na.rm = T) +zScore * (sd(noCoups)/sqrt(length(noCoups)))
mean(noCoups, na.rm = T) +zScore * (sd(noCoups)/sqrt(length(noCoups$pctvote)))
mean(noCoups, na.rm = T) +zScore * (sd(noCoups)/sqrt(length(noCoups$pctvote)))
mean(noCoups$pctvote, na.rm = T) +zScore * (sd(noCoups)/sqrt(length(noCoups$pctvote)))
mean(noCoups$pctvote, na.rm = T) - zScore * (sd(noCoups)/sqrt(length(noCoups$pctvote)))
zScore <- qnorm((1-.95)/2, lower.tail = F)
mean(noCoups$pctvote, na.rm = T) - zScore * (sd(noCoups)/sqrt(length(noCoups$pctvote)))
length(noCoups)
sd(noCoups$pctvote)
zScore <- qnorm((1-.95)/2, lower.tail = F)
sd(yesCoups$pctvote, na.rm = T)
sqrt(length(yesCoups$pctvote))
sd(anyCoups$pctvote, na.rm = T)
sd(yesCoups$pctvote, na.rm = T)
sqrt(length(yesCoups$pctvote))
pm <- zScore*(sd(noCoups$pctvote, na.rm = T) / sqrt(length(yesCoups$pctvote)))
pm <- zScore*(sd(noCoups$pctvote, na.rm = T) / sqrt(length(yesCoups$pctvote)))
## load data
afgan <- read.csv("afgan.csv")
zScore <- qnorm((1-.95)/2, lower.tail = F)
mean(noCoups$pctvote, na.rm = T) - zScore * (sd(noCoups)/sqrt(length(noCoups$pctvote)))
mean(noCoups$pctvote, na.rm = T) - zScore * sd(noCoups)/sqrt(length(noCoups$pctvote)))
length(noCoups)
sd(noCoups$pctvote)
zScore <- qnorm((1-.95)/2, lower.tail = F)
sd(yesCoups$pctvote, na.rm = T)
sqrt(length(yesCoups$pctvote))
pm <- zScore*(sd(noCoups$pctvote, na.rm = T) / sqrt(length(yesCoups$pctvote)))
c(mean(noCoups$pctvote, na.rm = T)-PM,)
set.seed(1,2,3)
set.seed(123)
x <- rnorm(10000, mean=0, sd=1)
pnrom(mean(x), mean=0, sd=1)
pnorm(mean(x), mean=0, sd=1)
qnorm(pnorm(mean( x ) , mean = 0 , sd = 1 ) , mean = 0 , sd = 1 )
dnorm(mean(x), mean=0, sd=1)
dnorm(mean(x), mean=1, sd=1)
dnorm(mean(x), mean=3, sd=1)
dnorm(mean(x), mean=0, sd=1)
?pnorm
3 abline ( v = mean( x ) , col = "red " , lwd =3 , l t y =2 )
xx <− seq ( min ( x ) , max( x ) , leng th =100 )
1 plo t ( xx , dnorm( xx , mean=0 , sd = 1 ) , type = " l " , xlab = " " , ylab = "
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
2 abline ( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , l t y =2 )
3 abline ( v = mean( x ) , col = "red " , lwd =3 , l t y =2 )
xx <− seq ( min ( x ) , max( x ) , leng th =100 )
xx <− seq ( min ( x ) , max( x ) , length =100 )
1 plo t ( xx , dnorm( xx , mean=0 , sd = 1 ) , type = " l " , xlab = " " , ylab = "
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
1 plot ( xx , dnorm( xx , mean=0 , sd = 1 ) , type = "l", xlab = "", ylab = ""
plot ( xx , dnorm( xx , mean=0 , sd = 1 ) , type = "l", xlab = "", ylab = ""
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , l t y =2 )
3 abline ( v = mean( x ) , col = "red " , lwd =3 , l t y =2 )
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , lty=2 )
abline ( v = mean( x ) , col = "red " , lwd =3 , l t y =2 )
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , lty=2 )
abline ( v = mean( x ) , col = "red " , lwd =3 , lty =2 )
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , lty=2 )
abline ( v = mean( x ) , col = "red " , lwd =3 , lty =2 )
x <− r u ni f (100000 , min = −1, max= 1 )
4 x <− sq r t ( 1 + x ) + 2 * x ^3 − 23 * x + abs ( log ( abs ( x ) ) ) + 2 * ( x >
. 5 ) + −2* ( x < −.5 )
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , lty=2 )
abline ( v = mean( x ) , col = "red " , lwd =3 , lty =2 )
x <− r u ni f (100000 , min = −1, max= 1 )
4 x <− sq r t ( 1 + x ) + 2 * x ^3 − 23 * x + abs ( log ( abs ( x ) ) ) + 2 * ( x >
. 5 ) + −2* ( x < −.5 )
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , lty=2 )
abline ( v = mean( x ) , col = "red " , lwd =3 , lty =2 )
x <− runif(100000 , min = −1, max= 1)
4 x <− sqrt ( 1 + x ) + 2 * x ^3 − 23 * x + abs ( log ( abs ( x ) ) ) + 2 * ( x >
. 5 ) + −2* ( x < −.5 )
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , lty=2 )
abline ( v = mean( x ) , col = "red " , lwd =3 , lty =2 )
x <− runif(100000 , min = −1, max= 1)
4 x <− sqrt ( 1 + x ) + 2 * x ^3 − 23 * x + abs ( log ( abs ( x ) ) ) + 2 * ( x >
.5 ) + −2* ( x < −.5 )
P r o b a bili t y densi ty " , cex . lab = 1 . 5 )
abline( h= dnorm(mean( x ) , mean = 0 , sd = 1 ) , col = "red " , lwd
=3 , lty=2 )
abline ( v = mean( x ) , col = "red " , lwd =3 , lty =2 )
x <− runif(100000 , min = −1, max= 1)
4 x <− sqrt ( 1 + x ) + 2 * x ^3 − 23 * x + abs ( log ( abs ( x ) ) ) + 2 *
( x >.5 ) + −2* ( x < −.5 )
testCSV <- read.csv("~/Documents/GitHub/QPMspring2019/labs/lab4/movies.csv")
testCSV <- read.csv("~/GitHub/QPMspring2019/labs/lab4/movies.csv")
View(testCSV)
## Load the data: a subset of 2004 American National Election Study
load("anes.Rdata")
sample_mean <- mean(anes$bushiraq, na.rm = TRUE)
sample_sd <- sd(anes$bushiraq, na.rm = TRUE)
n <- length(na.omit(anes$bushiraq))
## Let's say our confidence coefficient = .95
## Calculate the appropriate confidence interval for the
## mean level of support for how George W. Bush was
## handling the war in Iraq (bushIraq)
z95 <- qnorm((1 - .95)/2, lower.tail = FALSE)## (1-confidence coefficient)/2
lower_95 <- sample_mean - (z95 * (sample_sd/sqrt(n)))
upper_95 <- sample_mean + (z95 * (sample_sd/sqrt(n)))
confint95 <- c(lower_95, upper_95) ## What does this mean?
confint95
sample_mean
## Now let's use a confidence coefficient = .99
z99 <- qnorm((1 - .99)/2, lower.tail = FALSE)
for(i in 1:n.samples)
this.sample <- sample(x, size = sample.size, replace)
x <- runif(100000, min = -1, max=1)
<- sqrt()
sqrt
##
## 1. Difference in means test
##
help(t.test)
getwd()
setwd("~/Documents/GitHub/QPMspring2019/labs")
social <- read.csv("social.csv")
colnames(social)
social <- read.csv("social.csv")
colnames(social)
